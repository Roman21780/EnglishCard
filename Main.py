import logging
import telebot
from telebot import types
import psycopg2
from psycopg2 import Error
import random
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_PARAMS = {
    'dbname': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'host': os.getenv('DB_HOST'),
    'port': os.getenv('DB_PORT')
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('TOKEN_BOT')
bot = telebot.TeleBot(TOKEN)

def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        connection = psycopg2.connect(**DB_PARAMS)
        return connection
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}")
        return None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            create_tables_query = '''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    username VARCHAR(100),
                    first_name VARCHAR(100),
                    last_name VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TABLE IF NOT EXISTS words (
                    word_id SERIAL PRIMARY KEY,
                    english VARCHAR(100) NOT NULL,
                    russian VARCHAR(100) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );

                CREATE TABLE IF NOT EXISTS user_words (
                    user_id BIGINT REFERENCES users(user_id),
                    word_id INT REFERENCES words(word_id),
                    PRIMARY KEY (user_id, word_id)
                );

                CREATE TABLE IF NOT EXISTS learning_statistics (
                    user_id BIGINT REFERENCES users(user_id),
                    word_id INT REFERENCES words(word_id),
                    correct_answers INT DEFAULT 0,
                    incorrect_answers INT DEFAULT 0,
                    PRIMARY KEY (user_id, word_id)
                );
            '''
            cursor.execute(create_tables_query)
            connection.commit()

            cursor.close()
            connection.close()
            print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ PostgreSQL")
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –∏–ª–∏ –Ω–∞—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    )

    try:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
            cursor.execute(
                "INSERT INTO users (user_id, username, first_name, last_name) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING",
                (user_id, username, first_name, last_name))
            connection.commit()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT COUNT(*) FROM user_words WHERE user_id = %s", (user_id,))
            word_count = cursor.fetchone()[0]

            if word_count == 0:
                bot.send_message(
                    message.chat.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–π –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤. "
                    "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /add!"
                )
                return

            # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –µ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            word = get_random_word(user_id)
            if word:
                english, correct_translation = word
                wrong_answers = get_wrong_answers(correct_translation)

                all_answers = [correct_translation] + wrong_answers
                random.shuffle(all_answers)

                keyboard = types.InlineKeyboardMarkup()
                for answer in all_answers:
                    callback_data = f"answer_{answer}_{english}_{correct_translation}"
                    keyboard.add(types.InlineKeyboardButton(answer, callback_data=callback_data))

                bot.send_message(
                    message.chat.id,
                    f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: *{english}*",
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )

            cursor.close()
            connection.close()
    except Error as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

@bot.message_handler(commands=['help'])
def help_command(message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = (
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/add <english> <russian> - –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫\n"
        "/delete <english> - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    bot.send_message(message.chat.id, help_text)

def get_random_word(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT w.english, w.russian 
                FROM words w
                JOIN user_words uw ON w.word_id = uw.word_id
                WHERE uw.user_id = %s
                ORDER BY RANDOM() 
                LIMIT 1
            """, (user_id,))
            word = cursor.fetchone()
            cursor.close()
            connection.close()
            return word
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
        return None

def get_wrong_answers(correct_answer):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞"""
    try:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()
            cursor.execute("SELECT russian FROM words WHERE russian != %s ORDER BY RANDOM() LIMIT 3", (correct_answer,))
            wrong_answers = [row[0] for row in cursor.fetchall()]
            cursor.close()
            connection.close()
            return wrong_answers
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞: {e}")
        return []

@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    answer_data = call.data.split('_')
    user_answer = answer_data[1]
    english = answer_data[2]
    correct_translation = answer_data[3]

    try:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º word_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
            cursor.execute("SELECT word_id FROM words WHERE english = %s", (english,))
            word_id = cursor.fetchone()[0]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if user_answer == correct_translation:
                cursor.execute("""
                    INSERT INTO learning_statistics (user_id, word_id, correct_answers)
                    VALUES (%s, %s, 1)
                    ON CONFLICT (user_id, word_id) DO UPDATE
                    SET correct_answers = learning_statistics.correct_answers + 1
                """, (call.from_user.id, word_id))
                bot.answer_callback_query(call.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç")
            else:
                cursor.execute("""
                    INSERT INTO learning_statistics (user_id, word_id, incorrect_answers)
                    VALUES (%s, %s, 1)
                    ON CONFLICT (user_id, word_id) DO UPDATE
                    SET incorrect_answers = learning_statistics.incorrect_answers + 1
                """, (call.from_user.id, word_id))
                bot.answer_callback_query(call.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            connection.commit()

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            word = get_random_word(call.from_user.id)
            if word:
                new_english, new_correct_translation = word
                wrong_answers = get_wrong_answers(new_correct_translation)

                all_answers = [new_correct_translation] + wrong_answers
                random.shuffle(all_answers)

                keyboard = types.InlineKeyboardMarkup()
                for answer in all_answers:
                    callback_data = f"answer_{answer}_{new_english}_{new_correct_translation}"
                    keyboard.add(types.InlineKeyboardButton(answer, callback_data=callback_data))

                bot.edit_message_text(
                    f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: *{new_english}*",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
    except Error as e:
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_answer: {e}")

@bot.message_handler(commands=['add'])
def add_word(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    user_id = message.from_user.id

    try:
        if len(message.text.split()) < 3:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add english russian_word"
            )
            return

        english = message.text.split()[1].lower()
        russian_word = message.text.split()[2].lower()

        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            cursor.execute("SELECT word_id FROM words WHERE english = %s", (english,))
            word = cursor.fetchone()

            if not word:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                cursor.execute(
                    "INSERT INTO words (english, russian) VALUES (%s, %s) RETURNING word_id",
                    (english, russian_word)
                )
                word_id = cursor.fetchone()[0]
            else:
                word_id = word[0]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT * FROM user_words WHERE user_id = %s AND word_id = %s", (user_id, word_id))
            if cursor.fetchone():
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english}' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ!")
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "INSERT INTO user_words (user_id, word_id) VALUES (%s, %s)",
                (user_id, word_id)
            )
            connection.commit()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT COUNT(*) FROM user_words WHERE user_id = %s", (user_id,))
            word_count = cursor.fetchone()[0]

            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ —Å–ª–æ–≤: {word_count}")
    except Error as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")

@bot.message_handler(commands=['delete'])
def delete_word(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
    user_id = message.from_user.id

    try:
        if len(message.text.split()) < 2:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete english"
            )
            return

        english = message.text.split()[1].lower()

        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            # –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            cursor.execute("SELECT word_id FROM words WHERE english = %s", (english,))
            word = cursor.fetchone()

            if not word:
                bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ!")
                return

            word_id = word[0]

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("DELETE FROM user_words WHERE user_id = %s AND word_id = %s", (user_id, word_id))
            connection.commit()

            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{english}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    except Error as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")

@bot.message_handler(commands=['stats'])
def show_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id

    try:
        connection = get_db_connection()
        if connection:
            cursor = connection.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT 
                    SUM(correct_answers) AS total_correct,
                    SUM(incorrect_answers) AS total_incorrect
                FROM learning_statistics
                WHERE user_id = %s
            """, (user_id,))
            stats = cursor.fetchone()

            if stats and (stats[0] or stats[1]):
                total_correct, total_incorrect = stats
                bot.send_message(
                    message.chat.id,
                    f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total_correct}\n"
                    f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total_incorrect}"
                )
            else:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è.")
    except Error as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    print('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Ctrl+Z')
    bot.polling()